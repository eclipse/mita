package platforms.arduino.uno;


/**
 * Sensor for buttons
 */
sensor Button {
	generator "org.eclipse.mita.platform.arduino.uno.sensors.ButtonGenerator"
	
	/**
	 * Result is true, if the button is pressed. Gives the current state of the button.
	 */
	modality is_pressed : bool
	
	/**
	 * Fires after the button was pressed.
	 */	
	event pressed
	
	/**
	 * Fires after the button was released.
	 */
	event released
}

enum ArduinoUnoPins {
	p0,
	p1,
	p2,
	p3,
	p4,
	p5,
	p6,
	p7,
	p8,
	p9,
	p10,
	p11,
	p12,
	p13
}

enum Values {
	LOW,
	HIGH
}

enum Modes {
	INPUT,
	OUTPUT
}

/*
 * General Purpose Input Output support for Arduino Uno
 */
bus named-singleton GPIO {
	generator "org.eclipse.mita.platform.arduino.uno.buses.GPIOGenerator"
	
	signal pinMode(pin : ArduinoUnoPins, mode : Modes) : bool
}

alias button_one for Button
alias button_two for Button


/** 
 * The current pinout - this is how the Arduino Uno needs to be connected, if the button is used.
 * Arduino Pin |  Function
 * -------------------------
 *      2      | button_one
 *      3      | button_two
 *
 * The buttons are if not pressed logical high (5V).
 * Additionally, every port can be accessed by using the GPIO 
 */
platform ArduinoUno {
	module "org.eclipse.mita.platform.arduino.uno.platform.ArduinoUnoPlatformGeneratorModule"
	has button_one
	has button_two
	has GPIO
	event startup
}
