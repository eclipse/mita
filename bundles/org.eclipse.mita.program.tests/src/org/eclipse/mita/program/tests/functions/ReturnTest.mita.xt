/* XPECT_SETUP org.eclipse.mita.program.tests.functions.FunctionsTest 
Workspace {
	Project "testproject" {
	}  
}
END_SETUP
 */

package test;
import platforms.unittest; 

// functions can have an optional return type, if no return type is specified, it is inferred from return statements
fn foo11() {
	return 17;
}
fn callsFoo11() {
	// XPECT inferredType --> int32
	let x = foo11();
}

fn callFoo11() {
	var i : int32 = foo11();
	// XPECT errors --> "Assignment operator '=' may only be applied on compatible types, not on bool and int32." at "var b : bool = foo11();"
	var b : bool = foo11();
}

// for multiple return statements, the common type is inferred
// XPECT inferredType --> double
fn foo12() {
	if (true) {
		return 17;
	}
	return 4.0;
}

fn callFoo12() {
	var d : double = foo12();
	// XPECT errors --> "Assignment operator '=' may only be applied on compatible types, not on int32 and double." at "var j : int32 = foo12();"
	var j : int32 = foo12();
}

// XPECT errors --> "The operation must return a value of type bool." at "noRet"
fn noRet() : bool {}

fn incompatibleReturnTypes() : int32 {
	if (true) {
		// XPECT errors --> "The return type 'string' is not compatible with the operation's type 'int32'." at """"
		return "";
	} else {
		return 18;
	}
	// XPECT errors --> "The return type 'bool' is not compatible with the operation's type 'int32'." at "true"
	return true;
}

/* XPECT errors ---
"Could not infer common return type from operation's return statements" at "fn impossibleInference() {  	if (true) {  		return "";   	}  	return true;  }"
"Could not infer common return type from operation's return statements" at "fn impossibleInference() {  	if (true) {  		return "";   	}  	return true;  }"
--- */
fn impossibleInference() {
	if (true) {
		return "";
	}
	return true;
}
 
fn returnInVoid() : void {
	if(true) {
		return;
	} else {
		// XPECT errors --> "Void operations cannot return a value." at "return 1;"
		return 1;
	}
}

fn returnWithoutValudInNoVoidFunction() : uint32 {
	if(true) {
		// XPECT errors --> "The return type 'void' is not compatible with the operation's type 'uint32'." at "return;"
		return;
	}
}

struct vec2d_t {
    var x: int32;
    var y: int32;
}

alt anyVec { 
	  vec0d /* singleton */ 
	| vec1d: int32 
	| vec2d: vec2d_t 
	| vec3d: {x: int32, y: int32, z: int32} 
	| vec4d: int32, int32, int32, int32
}

//XPECT warnings --> "Returning non-primitive values from functions is experimental and might result in invalid C code." at "returnStruct1"
fn returnStruct1(): vec2d_t {
	var res: vec2d_t = vec2d_t(1,2);
	return res;
}

//XPECT warnings --> "Returning non-primitive values from functions is experimental and might result in invalid C code." at "returnStruct2"
fn returnStruct2(): vec2d_t {
	return vec2d_t(4,2);
}

//XPECT warnings --> "Returning non-primitive values from functions is experimental and might result in invalid C code." at "returnSumType0"
fn returnSumType0(): anyVec {
	var res: anyVec = anyVec.vec0d();
	return res;
}
//XPECT warnings --> "Returning non-primitive values from functions is experimental and might result in invalid C code." at "returnSumType1"
fn returnSumType1(): anyVec {
	var res: anyVec = anyVec.vec1d(1);
	return res;
}
//XPECT warnings --> "Returning non-primitive values from functions is experimental and might result in invalid C code." at "returnSumType2"
fn returnSumType2(): anyVec {
	var res: anyVec = anyVec.vec2d(1,2);
	return res;
}
//XPECT warnings --> "Returning non-primitive values from functions is experimental and might result in invalid C code." at "returnSumType3"
fn returnSumType3(): anyVec {
	var res: anyVec = anyVec.vec3d(1,2,3);
	return res;
}
//XPECT warnings --> "Returning non-primitive values from functions is experimental and might result in invalid C code." at "returnSumType4"
fn returnSumType4(): anyVec {
	var res: anyVec = anyVec.vec4d(1,2,3,4);
	return res;
}

//XPECT warnings --> "Returning non-primitive values from functions is experimental and might result in invalid C code." at "returnSumType5"
fn returnSumType5(): anyVec {
	return anyVec.vec0d();
}
//XPECT warnings --> "Returning non-primitive values from functions is experimental and might result in invalid C code." at "returnSumType6"
fn returnSumType6(): anyVec {
	return anyVec.vec1d(1);
}
//XPECT warnings --> "Returning non-primitive values from functions is experimental and might result in invalid C code." at "returnSumType7"
fn returnSumType7(): anyVec {
	return anyVec.vec2d(1,2);
}
//XPECT warnings --> "Returning non-primitive values from functions is experimental and might result in invalid C code." at "returnSumType8"
fn returnSumType8(): anyVec {
	return anyVec.vec3d(1,2,3);
}
//XPECT warnings --> "Returning non-primitive values from functions is experimental and might result in invalid C code." at "returnSumType9"
fn returnSumType9(): anyVec {
	return anyVec.vec4d(1,2,3,4);
}

//XPECT warnings --> "Returning non-primitive values from functions is experimental and might result in invalid C code." at "returnArray1"
fn returnArray1(): array<int32> {
	var res: array<int32> = [1,2,3,4];
	return res;
}

//XPECT warnings --> "Returning non-primitive values from functions is experimental and might result in invalid C code." at "returnArray2"
fn returnArray2(): array<int32> {
	return [1,2,3,4];
}

//XPECT errors --> "Could not infer the size of the function's return." at "returnArrayBad"
fn returnArrayBad(s: int32): array<int32> {
	return new array<int32>(size = s);
}

//XPECT warnings --> "Returning non-primitive values from functions is experimental and might result in invalid C code." at "returnString1"
fn returnString1(): string {
	var res: string = "abc";
	return res;
}
//XPECT warnings --> "Returning non-primitive values from functions is experimental and might result in invalid C code." at "returnString2"
fn returnString2(): string {
	return "abc";
}

fn returnOptional0(): int32? {
	var res: int32? = 1;
	return res;
}
fn returnOptional1(): int32? {
	var res: int32? = none();
	return res;
}
fn returnOptional2(): int32? {
	var res: int32? = some(1);
	return res;
}
fn returnOptional3(): int32? {
//XPECT errors --> "Implicit construction of optionals in returns is not yet supported. Please use 'optional.some' instead." at "return 1;"
	return 1;
}
fn returnOptional4(): int32? {
	return none();
}
fn returnOptional5(): int32? {
	return some(1);
}

//INGORE noCompileErrors
fn testComplexReturns() {
  var x1  = returnStruct1();
  var x2  = returnStruct2();
  var x3  = returnSumType0();
  var x4  = returnSumType1();
  var x5  = returnSumType2();
  var x6  = returnSumType3();
  var x7  = returnSumType4();
  var x8  = returnSumType5();
  var x9  = returnSumType6();
  var x10 = returnSumType7();
  var x11 = returnSumType8();
  var x12 = returnSumType9();
  var x13 = returnArray1();
  var x14 = returnArray2();
  var x15 = returnString1();
  var x16 = returnString2();
  var x17 = returnOptional0();
  var x18 = returnOptional1();
  var x19 = returnOptional2();
  // this isn't implemented yet, but explicitly so
  //var x20 = returnOptional3();
  var x21 = returnOptional4();
  var x22 = returnOptional5();
}

