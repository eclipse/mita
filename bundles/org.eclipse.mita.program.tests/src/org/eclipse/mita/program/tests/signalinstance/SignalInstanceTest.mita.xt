/* XPECT_SETUP org.eclipse.mita.program.tests.signalinstance.SignalInstanceTest 
Workspace {
	Project "testproject" {
	}  
}
END_SETUP */

package test;
import platforms.unittest; 

setup connectivity : MyConnectivity {
	// XPECT infos --> "<auto>.CFG_VAL_1() has type âˆ—MyConfigItemValues(CFG_VAL_1() | CFG_VAL_2() | CFG_VAL_3())" at ".CFG_VAL_1"
	var signal_instance00 = vci00(p01=true, p02=.CFG_VAL_1);
	var signal_instance01 = vci01(20);
	var signal_instance03 = vci03(5);
	var signal_instance04 = vci04(6);
}

fn accessWithoutReadOrWrite() {
	/* XPECT errors ---
		"Cannot determine size of element: Object does not have a size" at "connectivity.signal_instance00"
		"Signal instances must be used immediately. Add .read() or .write() after signal_instance00" at "signal_instance00"
	--- */
	var x1 = connectivity.signal_instance00;
}

// XPECT errors ---> "Signal instances and modalities cannot be passed as parameters." at "siginst<uint32>"
fn functionWithSiginstParameter(p : siginst<uint32>) { 
}

// XPECT errors ---> "Could not infer the size of the function's return." at "functionReturningSiginst"
fn functionReturningSiginst() : siginst<bool> {
	// XPECT errors --> "Signal instances must be used immediately. Add .read() or .write() after signal_instance00" at "signal_instance00"
	return connectivity.signal_instance00;
}

fn useSiginstCorrectly() {
	// XPECT inferredType ---> bool
	var x1 = connectivity.signal_instance00.read();
	
	// XPECT inferredType ---> uint16
	var x2 = connectivity.signal_instance01.read();
	
	// XPECT inferredType ---> string
	// XPECT inferredSize ---> string::5
	var x3 = connectivity.signal_instance03.read();
	
	// XPECT inferredType ---> array<int32>
	// XPECT inferredSize ---> array<int32>::6
	let x4 = connectivity.signal_instance04.read();
	
	// this should work
	if(true) {
		let x5 = connectivity.signal_instance04.read();
	}
	
	connectivity.signal_instance00.write(true);
	connectivity.signal_instance01.write(20);
	
	connectivity.signal_instance03.write("asdf");
	let data = [1,2,3,4];
	connectivity.signal_instance04.write(data);
	
	// use as non-extension method call
	
	// XPECT inferredType ---> bool
	var x6 = read(connectivity.signal_instance00);
	
	write(connectivity.signal_instance00, true);
}
