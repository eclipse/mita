/* XPECT_SETUP org.eclipse.mita.program.tests.arrays.ArraysTest 
Workspace {
	Project "testproject" {
	}  
}
END_SETUP */

package test;
import platforms.unittest;

// Arrays are value types
var foo = new array<uint8>(size = 10);

// Arrays can be initialized with brackets
var foo2: array<uint8> = [1, 2, 3, 4, 5];

/* XPECT errors ---
"prim»i»1 (:: xint8) doesn't share a common type with the other members of this array literal" at "1"
"prim»i»2 (:: xint8) doesn't share a common type with the other members of this array literal" at "2"
"prim»b»true (:: bool) doesn't share a common type with the other members of this array literal" at "true"
--- */
var baz = [1, 2, true];

// XPECT noCompileErrors
fn works() {
	var x2 = foo[2];
	foo[2] = 42;
	
	x2 = foo2[2];
	foo2[2] = 10;
	
	// arrays can be copied
	var a = new array<uint16>(size = 10);
	var b = new array<uint16>(size = 8);
	b = a;
	// TODO: it's not possible right now to have a circular assignment.
	// To fix this we need to take into account only previous statements when calculating the size of an EREF.  
	//a = b;
	
	// arrays can be initialized with literals
	// XPECT inferredType --> array<xint8>
	var v1 = [1, 2, 3, 4, 5];
	v1 = [4, 5, 6];
	// arrays can be copied partially with slices
	// XPECT inferredLength --> 4
	var v2 = v1[1:];
	// XPECT inferredLength --> 2
	var v3 = v1[:2];
	// XPECT inferredLength --> 5
	var v4 = v1[:];
	// XPECT inferredLength --> 2
	var v5 = v1[1:3];
	// this error is actually fine, it's a consequence of global type inference. 
    // It happens because of lines like line 168 (b = a[-2:-1];), negative indices create a graph  uint32 -> f_685.0 <- int8.
    // With those lines disabled in ArraysTest.mita.xt no errors occur. 
	/* XPECT errors ---
		"Function length cannot be used here: Return type incompatible: uint32 is not subtype of A" at "length"
	--- */
	var l = v1.length();
	
	// this should result in no errors
	if(true) {
		let v6 = v1;
	}
}

fn blabla() {
	// Array elements can be accessed with square brackets
	// XPECT inferredType --> uint8
	var x2 = foo[2];
	foo[2] = 42;
	
	// we range check
	// XPECT errors --> "Array index out of bounds: length = 10" at "10"
	var x1 = foo[10];
	// XPECT errors --> "Array index out of bounds: length = 10" at "10"
	foo[10] = 10;
	
	//also test array literals
	x2 = foo2[2];
	foo2[2] = 10;
	
	// we range check
	// XPECT errors --> "Array index out of bounds: length = 5" at "10"
	x1 = foo2[10];
	// XPECT errors --> "Array index out of bounds: length = 5" at "10"
	foo2[10] = 10;
	
	// arrays can be copied
	var a = new array<uint16>(size = 10);
	var b = new array<uint16>(size = 8);
	b = a;
	// TODO: it's not possible right now to have a circular assignment.
	// To fix this we need to take into account only previous statements when calculating the size of an EREF.  
	//a = b;
	
	// arrays can be initialized with literals
	// XPECT inferredType --> array<xint8>
	var v1 = [1, 2, 3, 4, 5];
	v1 = [4, 5, 6];
	// arrays can be copied partially with slices
	// XPECT inferredLength --> 4
	var v2 = v1[1:];
	// XPECT inferredLength --> 2
	var v3 = v1[:2];
	// XPECT inferredLength --> 5
	var v4 = v1[:];
	// XPECT inferredLength --> 2
	var v5 = v1[1:3];
	
	// slices on the left are forbidden
	// XPECT errors --> "The left-hand side of an assignment must be a variable." at "v1[1:3]"
	v1[1:3] = [0, 1];
	// XPECT errors --> "The left-hand side of an assignment must be a variable." at "v1[1:3]"
	v1[1:3] = v1[2:4];
}

every 100 milliseconds {
	// Array elements can be accessed with square brackets
	// XPECT inferredType --> uint8
	var x2 = foo[2];
	foo[2] = 42;
	
	// we range check
	// XPECT errors --> "Array index out of bounds: length = 10" at "10"
	var x1 = foo[10];
	// XPECT errors --> "Array index out of bounds: length = 10" at "10"
	foo[10] = 10;
	
	// Array elements can be accessed with square brackets
	x2 = foo2[2];
	foo2[2] = 10;
	
	// we range check
	// XPECT errors --> "Array index out of bounds: length = 5" at "10"
	x1 = foo2[10];
	// XPECT errors --> "Array index out of bounds: length = 5" at "10"
	foo2[10] = 10;
	
	// arrays can be copied
	var a = new array<uint16>(size = 10);
	var b = new array<uint16>(size = 8);
	b = a;
	// TODO: it's not possible right now to have a circular assignment.
	// To fix this we need to take into account only previous statements when calculating the size of an EREF.  
	//a = b;
	
	// arrays can be initialized with literals
	// XPECT inferredType --> array<xint8>
	var v1 = [1, 2, 3, 4, 5];
	v1 = [4, 5, 6];
	// arrays can be copied partially with slices
	// XPECT inferredLength --> 4
	var v2 = v1[1:];
	// XPECT inferredLength --> 2
	var v3 = v1[:2];
	// XPECT inferredLength --> 5
	var v4 = v1[:];
	// XPECT inferredLength --> 2
	var v5 = v1[1:3];
	
	// slices on the left are forbidden
	// XPECT errors --> "The left-hand side of an assignment must be a variable." at "v1[1:3]"
	v1[1:3] = [0, 1];
	// XPECT errors --> "The left-hand side of an assignment must be a variable." at "v1[1:3]"
	v1[1:3] = v1[2:4];
}

fn errors() {
	var a = new array<uint16>(size = 5);
	// XPECT errors --> "Array range is invalid: Lower bound must be smaller than upper bound" at "2:1"
	var b = a[2:1];
	// XPECT errors --> "Array range is invalid: Lower bound must be smaller than upper bound" at "6:"
	b = a[6:];
	// XPECT errors --> "Array range is invalid: Upper bound must be less than or equal to array size (5)" at ":7"
	b = a[:7];
	/* XPECT errors ---
		"-prim»i»1 (:: int8) must be an unsigned integer" at "-1"
		"-prim»i»2 (:: int8) must be an unsigned integer" at "-2"
		"-prim»i»2:-prim»i»1 (:: A) must be an unsigned integer" at "-2:-1"
		"-prim»i»2:-prim»i»1 (:: int8) must be an unsigned integer" at "-2:-1"
		"All values in -prim»i»2:-prim»i»1 (:: A) must be unsigned integers" at "-2:-1"
		"All values in -prim»i»2:-prim»i»1 (:: int8) must be unsigned integers" at "-2:-1"
		"Array range is invalid: Lower bound must be positive or zero" at "-2:-1"
		"Array range is invalid: Upper bound must be strictly positive" at "-2:-1"
	--- */
	b = a[-2:-1];
	/* XPECT errors ---
		"prim»s»"asdf" (:: string) has a different type than str (:: A)" at ""asdf""
		"prim»s»"asdf" (:: string) has a different type than str (:: uint32)" at ""asdf""
	--- */
	var str = "asdf";
	/* XPECT errors ---
		"str (:: A) must be an unsigned integer" at "str"
	--- */
	var c = a[str];
	/* XPECT errors ---
		"All values in str: (:: A) must be unsigned integers" at "str:"
		"str (:: A) must be an unsigned integer" at "str"
		"str: (:: A) must be an unsigned integer" at "str:"
	--- */
	b = a[str:];
	/* XPECT errors ---
		":str (:: A) must be an unsigned integer" at ":str"
		"All values in :str (:: A) must be unsigned integers" at ":str"
		"str (:: A) must be an unsigned integer" at "str"
	--- */
	b = a[:str];
	/* XPECT errors ---
		"All values in str:str (:: A) must be unsigned integers" at "str:str"
		"str (:: A) must be an unsigned integer" at "str"
		"str (:: A) must be an unsigned integer" at "str"
		"str:str (:: A) must be an unsigned integer" at "str:str"
	--- */
	b = a[str:str];
}

// XPECT noCompileErrors
// XPECT warnings ---> "Returning non-primitive values from functions is experimental and might result in invalid C code." at "returnArrayLiteral"
fn returnArrayLiteral() : array<uint8> {
	return [1,2,3,4];
}

// XPECT noCompileErrors
// XPECT warnings ---> "Returning non-primitive values from functions is experimental and might result in invalid C code." at "returnArrayLiteralAgain"
fn returnArrayLiteralAgain() {
	return [1,2,3,4];
}

struct SensorMessage {
    var accX : int32;
    var accY : int32;
    var accZ : int32;

    var temp : int32;
}

// XPECT noCompileErrors
fn mean(data : array<SensorMessage>) {
    let result : SensorMessage;
    // this error is actually fine, it's a consequence of global type inference. 
    // It happens because of lines like line 168 (b = a[-2:-1];), negative indices create a graph  uint32 -> f_685.0 <- int8.
    // With those lines disabled in ArraysTest.mita.xt no errors occur. 
	/* XPECT errors ---
		"Function length cannot be used here: A, B" at "length"
		"Function length cannot be used here: Return type incompatible: uint32 is not subtype of A" at "length"
	--- */
    for(var i = 0; i < data.length(); i++) {
        // featureCalls on arrayAccess is allowed
        result.accX += data[i].accX; 
        result.accY += data[i].accY; 
        result.accZ += data[i].accZ; 
        result.temp += data[i].temp; 
    }
}

