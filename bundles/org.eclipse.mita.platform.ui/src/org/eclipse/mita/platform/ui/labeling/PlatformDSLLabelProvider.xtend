/********************************************************************************
 * Copyright (c) 2017, 2018 Bosch Connected Devices and Solutions GmbH.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * Contributors:
 *    Bosch Connected Devices and Solutions GmbH - initial contribution
 *
 * SPDX-License-Identifier: EPL-2.0
 ********************************************************************************/

/*
 * generated by Xtext 2.10.0
 */
package org.eclipse.mita.platform.ui.labeling

import org.eclipse.mita.platform.Modality
import org.eclipse.mita.platform.Sensor
import org.eclipse.mita.platform.SignalEvent
import org.eclipse.mita.platform.SystemResourceAlias
import org.eclipse.mita.platform.SystemResourceEvent
import com.google.inject.Inject
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider
import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider
import org.eclipse.mita.base.types.inferrer.ITypeSystemInferrer
import org.eclipse.mita.platform.ConfigurationItem

/**
 * Provides labels for EObjects.
 * 
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#label-provider
 */
class PlatformDSLLabelProvider extends DefaultEObjectLabelProvider {

	@Inject
	ITypeSystemInferrer typeInferrer

	@Inject
	new(AdapterFactoryLabelProvider delegate) {
		super(delegate);
	}
	
	def image(Sensor element) {
		'sensor.png'
	}
	
	def image(Modality element) {
		return 'sensor.png'
	}
	
	def text(ConfigurationItem ele) {
		'''«IF ele.required»required«ENDIF» configuration <b>«ele.name» : «ele.type»</b>'''
	}
	
	def text(Sensor ele) {
		'''sensor <b>«ele.name»</b>'''
	}
	
	def text(SystemResourceAlias ele) {
		'''«ele.label» <b>«ele.name» : «ele.delegate?.name»</b>'''
	}
	
	protected dispatch def String getLabel(SystemResourceAlias alias) {
		return 'sensor';
	}
	
	protected dispatch def String getLabel(EObject object) {
		return object.eClass.name;
	}
	
	def text(SystemResourceEvent ele) {
		'''resource event <b>«ele.name»</b>'''
	}
	
	def text(SignalEvent ele) {
		'''signal event <b>«ele.name»</b>'''
	}
	
	def text(Modality ele) {
		val type = typeInferrer.infer(ele)?.type
		'''«ele.eContainer.label.toLowerCase» modality <b>«ele.name» : «type»</b>'''
	}

	override protected convertToString(Object text) {
		if(text instanceof CharSequence) {
			// enables us to use Xtend templates
			return text.toString();
		} else {
			return super.convertToString(text);			
		}
	}
	
}
