/********************************************************************************
 * Copyright (c) 2017, 2018 Bosch Connected Devices and Solutions GmbH.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * Contributors:
 *    Bosch Connected Devices and Solutions GmbH - initial contribution
 *
 * SPDX-License-Identifier: EPL-2.0
 ********************************************************************************/

package stdlib;

/*
 * # Iterables
 * 
 * Iterables are the base-type of all types which can be iterated using a for-each loop.
 * They offer some generic functionality on a "bunch of items" level. 
 */
/*export generated type iterable<T>
	generator ""
	size-inferrer ""
	constructor con();
*/
/*
 * # Lists
 * 
 * A list is an ordered collection of elements which offers random read/write access.
 */
export generated type array<T, Size is uint32>
	generator "org.eclipse.mita.library.stdlib.ArrayGenerator"
	size-inferrer "org.eclipse.mita.library.stdlib.ArraySizeInferrer"
	
	constructor con();

/*
 * Returns the length of an array.
 */

export generated fn <T, S> length(self : array<T, S>) : uint32 generator "org.eclipse.mita.library.stdlib.ArrayGenerator$LengthGenerator";
export generated fn <T, S> capacity(self : array<T, S>) : uint32 generator "org.eclipse.mita.library.stdlib.ArrayGenerator$CapacityhGenerator";
export generated fn <S> length(self : string<S>) : uint32 generator "org.eclipse.mita.library.stdlib.ArrayGenerator$LengthGenerator";
export generated fn <S> capacity(self : string<S>) : uint32 generator "org.eclipse.mita.library.stdlib.ArrayGenerator$CapacityGenerator";
export native unchecked function <T, S1, S2> __PLUS__(x: array<T, S1>, y: array<T, S2>): array<T, S1 + S2> header "string.h";

//
///*
// * # Lists
// * 
// * A list is an ordered collection of elements which offers random read/write access.
// */
export generated type ringbuffer<T, Size is uint32>
	generator "org.eclipse.mita.library.stdlib.RingbufferGenerator"
	size-inferrer "org.eclipse.mita.library.stdlib.ArraySizeInferrer"
	
	constructor con();
	
export generated fn <T, S> push(self: ringbuffer<T, S>, element: T): void generator "org.eclipse.mita.library.stdlib.RingbufferGenerator$PushGenerator";
export generated fn <T, S> pop(self: ringbuffer<T, S>): T 
	generator "org.eclipse.mita.library.stdlib.RingbufferGenerator$PopGenerator"
	size-inferrer "org.eclipse.mita.library.stdlib.RingbufferGenerator$PopInferrer"
;
export generated fn <T, S> peek(self: ringbuffer<T, S>): T 
	generator "org.eclipse.mita.library.stdlib.RingbufferGenerator$PeekGenerator"
	size-inferrer "org.eclipse.mita.library.stdlib.RingbufferGenerator$PopInferrer";
export generated fn <T, S> count(self: ringbuffer<T, S>): uint32 generator "org.eclipse.mita.library.stdlib.RingbufferGenerator$CountGenerator";
export generated fn <T, S> empty(self: ringbuffer<T, S>): bool generator "org.eclipse.mita.library.stdlib.RingbufferGenerator$EmptyGenerator";
export generated fn <T, S> full(self: ringbuffer<T, S>): bool generator "org.eclipse.mita.library.stdlib.RingbufferGenerator$FullGenerator";
export generated fn <T, S> capacity(self : ringbuffer<T, S>): uint32 generator "org.eclipse.mita.library.stdlib.ArrayGenerator$CapacityGenerator";

export native unchecked function <T, S1, S2> __PLUS__(x: array<T, S1>, y: array<T, S2>): array<T, S1 + S2> header "string.h";


///*
// * # Stacks
// * 
// * A stack is an ordered collection of elements where elements can be placed on top
// * or removed from the top of the stack.
// */
//type stack<T> {
//	property size : uint32
//}

/*
 * Pushes a new element on top of the stack. Returns false if the stack is full and the
 * element was not placed on the stack.
 */
//fn <T> push(self : stack<T>) : bool

/*
 * Returns and removes the top-most element from the stack. Throws NoSuchElementException
 * if the stack is empty.
 */
//fn <T> pop(self : stack<T>) : T

/*
 * Returns, but does not remove, the top-most element from the stack. Throws NoSuchElementException
 * if the stack is empty.
 */
//fn <T> peek(self : stack<T>) : T

/*
 * # Utility functions
 * 
 * A collection of functions which make development easier.
 */
