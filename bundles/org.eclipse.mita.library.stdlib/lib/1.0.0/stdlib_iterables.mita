/********************************************************************************
 * Copyright (c) 2017, 2018 Bosch Connected Devices and Solutions GmbH.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * Contributors:
 *    Bosch Connected Devices and Solutions GmbH - initial contribution
 *
 * SPDX-License-Identifier: EPL-2.0
 ********************************************************************************/

package stdlib;

/*
 * # Iterables
 * 
 * Iterables are the base-type of all types which can be iterated using a for-each loop.
 * They offer some generic functionality on a "bunch of items" level. 
 */
/*export generated type iterable<T>
	generator ""
	size-inferrer ""
	constructor con();
*/
/*
 * # Lists
 * 
 * A list is an ordered collection of elements which offers random read/write access.
 */
export generated type array<T>
	generator "org.eclipse.mita.library.stdlib.ArrayGenerator"
	size-inferrer "org.eclipse.mita.library.stdlib.ArraySizeInferrer"
	
	constructor con(size : static uint32);

/*
 * Returns the length of an array.
 */
export generated fn <T> length(self : array<T>) : uint32 generator "org.eclipse.mita.library.stdlib.ArrayGenerator$LengthGenerator";
export generated fn length(self : string) : uint32 generator "org.eclipse.mita.library.stdlib.ArrayGenerator$LengthGenerator";

//
///*
// * # Lists
// * 
// * A list is an ordered collection of elements which offers random read/write access.
// */
//type ringbuffer<T> {
//	property size : uint32
//}
//
///*
// * # Stacks
// * 
// * A stack is an ordered collection of elements where elements can be placed on top
// * or removed from the top of the stack.
// */
//type stack<T> {
//	property size : uint32
//}


/*
 * Removes all elements from the list
 */
//extern fn <T> clear(self : ringbuffer<T>) : void

/*
 * Adds an element to the end of the list. Returns false if the list is full.
 */
//extern fn <T> add(self : ringbuffer<T>) : bool

/*
 * Gets an element from the list. Throws an IndexOutOfBounds exception if the index is
 * is less than zero or greater-equal than the list size.
 */
//extern fn <T> get(self : ringbuffer<T>, index : uint32) : T

//extern fn <T> newInstance(self : stack<T>, size : static uint32) : stack<T>

/*
 * Pushes a new element on top of the stack. Returns false if the stack is full and the
 * element was not placed on the stack.
 */
//fn <T> push(self : stack<T>) : bool

/*
 * Returns and removes the top-most element from the stack. Throws NoSuchElementException
 * if the stack is empty.
 */
//fn <T> pop(self : stack<T>) : T

/*
 * Returns, but does not remove, the top-most element from the stack. Throws NoSuchElementException
 * if the stack is empty.
 */
//fn <T> peek(self : stack<T>) : T

/*
 * # Utility functions
 * 
 * A collection of functions which make development easier.
 */
