/********************************************************************************
 * Copyright (c) 2017, 2018 Bosch Connected Devices and Solutions GmbH.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * Contributors:
 *    Bosch Connected Devices and Solutions GmbH - initial contribution
 *
 * SPDX-License-Identifier: EPL-2.0
 ********************************************************************************/

package stdlib; 

native-type xint32 alias-of int32_t header "stdint.h"
native-type xint16 alias-of int16_t header "stdint.h"
native-type xint8  alias-of int8_t  header "stdint.h"

export native-type int32 alias-of int32_t header "stdint.h"
export native-type int16 alias-of int16_t header "stdint.h"
export native-type int8  alias-of int8_t  header "stdint.h"

export native-type uint32 alias-of uint32_t header "stdint.h"
export native-type uint16 alias-of uint16_t header "stdint.h"
export native-type uint8  alias-of uint8_t  header "stdint.h"

export native-type bool header "stdbool.h"
export native-type double
export native-type float
export native-type void

export native unchecked function __PLUS__(x: xint32, y: xint32): xint32 header "math.h";
export native unchecked function __PLUS__(x: xint16, y: xint16): xint16 header "math.h";
export native unchecked function __PLUS__(x: xint8 , y: xint8 ): xint8  header "math.h";
export native unchecked function __PLUS__(x:  int32, y:  int32):  int32 header "math.h";
export native unchecked function __PLUS__(x:  int16, y:  int16):  int16 header "math.h";
export native unchecked function __PLUS__(x:  int8 , y:  int8 ):  int8  header "math.h";
export native unchecked function __PLUS__(x: uint32, y: uint32): uint32 header "math.h";
export native unchecked function __PLUS__(x: uint16, y: uint16): uint16 header "math.h";
export native unchecked function __PLUS__(x: uint8 , y: uint8 ): uint8  header "math.h";
export native unchecked function __PLUS__(x: float , y: float ): float  header "math.h";
export native unchecked function __PLUS__(x: double, y: double): double header "math.h";

export native unchecked function __PLUS__(x: string, y: string): string header "string.h";
export native unchecked function <T> __PLUS__(x: array<T>, y: array<T>): array<T> header "string.h";

export native unchecked function __MINUS__(x: xint32, y: xint32):  int32 header "math.h";
export native unchecked function __MINUS__(x: xint16, y: xint16):  int16 header "math.h";
export native unchecked function __MINUS__(x: xint8 , y: xint8 ):  int8  header "math.h";
export native unchecked function __MINUS__(x:  int32, y:  int32):  int32 header "math.h";
export native unchecked function __MINUS__(x:  int16, y:  int16):  int16 header "math.h";
export native unchecked function __MINUS__(x:  int8 , y:  int8 ):  int8  header "math.h";
export native unchecked function __MINUS__(x: uint32, y: uint32):  int32 header "math.h";
export native unchecked function __MINUS__(x: uint16, y: uint16):  int16 header "math.h";
export native unchecked function __MINUS__(x: uint8 , y: uint8 ):  int8  header "math.h";
export native unchecked function __MINUS__(x: float , y: float ): float  header "math.h";
export native unchecked function __MINUS__(x: double, y: double): double header "math.h";

export native unchecked function __TIMES__(x: xint32, y: xint32): uint32 header "math.h";
export native unchecked function __TIMES__(x: xint16, y: xint16): xint32 header "math.h";
export native unchecked function __TIMES__(x: xint8 , y: xint8 ): xint16 header "math.h";
export native unchecked function __TIMES__(x:  int32, y:  int32):  int32 header "math.h";
export native unchecked function __TIMES__(x:  int16, y:  int16):  int32 header "math.h";
export native unchecked function __TIMES__(x:  int8 , y:  int8 ):  int16 header "math.h";
export native unchecked function __TIMES__(x: uint32, y: uint32): uint32 header "math.h";
export native unchecked function __TIMES__(x: uint16, y: uint16): uint32 header "math.h";
export native unchecked function __TIMES__(x: uint8 , y: uint8 ): uint16 header "math.h";
export native unchecked function __TIMES__(x: float , y: float ): float  header "math.h";
export native unchecked function __TIMES__(x: double, y: double): double header "math.h";

export native unchecked function __DIVISION__(x: xint32, y: xint32): xint32 header "math.h";
export native unchecked function __DIVISION__(x: xint16, y: xint16): xint16 header "math.h";
export native unchecked function __DIVISION__(x: xint8 , y: xint8 ): xint8  header "math.h";
export native unchecked function __DIVISION__(x:  int32, y:  int32):  int32 header "math.h";
export native unchecked function __DIVISION__(x:  int16, y:  int16):  int16 header "math.h";
export native unchecked function __DIVISION__(x:  int8 , y:  int8 ):  int8  header "math.h";
export native unchecked function __DIVISION__(x: uint32, y: uint32): uint32 header "math.h";
export native unchecked function __DIVISION__(x: uint16, y: uint16): uint16 header "math.h";
export native unchecked function __DIVISION__(x: uint8 , y: uint8 ): uint8  header "math.h";
export native unchecked function __DIVISION__(x: float , y: float ): float  header "math.h";
export native unchecked function __DIVISION__(x: double, y: double): double header "math.h";

export native unchecked function __MODULO__(x: xint32, y: xint32): xint32 header "math.h";
export native unchecked function __MODULO__(x: xint16, y: xint16): xint16 header "math.h";
export native unchecked function __MODULO__(x: xint8 , y: xint8 ): xint8  header "math.h";
export native unchecked function __MODULO__(x:  int32, y:  int32):  int32 header "math.h";
export native unchecked function __MODULO__(x:  int16, y:  int16):  int16 header "math.h";
export native unchecked function __MODULO__(x:  int8 , y:  int8 ):  int8  header "math.h";
export native unchecked function __MODULO__(x: uint32, y: uint32): uint32 header "math.h";
export native unchecked function __MODULO__(x: uint16, y: uint16): uint16 header "math.h";
export native unchecked function __MODULO__(x: uint8 , y: uint8 ): uint8  header "math.h";

export native unchecked function __LEFTSHIFT__(x: xint32, y: uint8): xint32 header "math.h";
export native unchecked function __LEFTSHIFT__(x: xint16, y: uint8): xint16 header "math.h";
export native unchecked function __LEFTSHIFT__(x: xint8 , y: uint8): xint8  header "math.h";
export native unchecked function __LEFTSHIFT__(x:  int32, y: uint8):  int32 header "math.h";
export native unchecked function __LEFTSHIFT__(x:  int16, y: uint8):  int16 header "math.h";
export native unchecked function __LEFTSHIFT__(x:  int8 , y: uint8):  int8  header "math.h";
export native unchecked function __LEFTSHIFT__(x: uint32, y: uint8): uint32 header "math.h";
export native unchecked function __LEFTSHIFT__(x: uint16, y: uint8): uint16 header "math.h";
export native unchecked function __LEFTSHIFT__(x: uint8 , y: uint8): uint8  header "math.h";

export native unchecked function __RIGHTSHIFT__(x: xint32, y: uint8): xint32 header "math.h";
export native unchecked function __RIGHTSHIFT__(x: xint16, y: uint8): xint16 header "math.h";
export native unchecked function __RIGHTSHIFT__(x: xint8 , y: uint8): xint8  header "math.h";
export native unchecked function __RIGHTSHIFT__(x:  int32, y: uint8):  int32 header "math.h";
export native unchecked function __RIGHTSHIFT__(x:  int16, y: uint8):  int16 header "math.h";
export native unchecked function __RIGHTSHIFT__(x:  int8 , y: uint8):  int8  header "math.h";
export native unchecked function __RIGHTSHIFT__(x: uint32, y: uint8): uint32 header "math.h";
export native unchecked function __RIGHTSHIFT__(x: uint16, y: uint8): uint16 header "math.h";
export native unchecked function __RIGHTSHIFT__(x: uint8 , y: uint8): uint8  header "math.h";

export native unchecked function __POSTINCREMENT__(x: xint32): xint32 header "math.h";
export native unchecked function __POSTINCREMENT__(x: xint16): xint16 header "math.h";
export native unchecked function __POSTINCREMENT__(x: xint8 ): xint8  header "math.h";
export native unchecked function __POSTINCREMENT__(x:  int32):  int32 header "math.h";
export native unchecked function __POSTINCREMENT__(x:  int16):  int16 header "math.h";
export native unchecked function __POSTINCREMENT__(x:  int8 ):  int8  header "math.h";
export native unchecked function __POSTINCREMENT__(x: uint32): uint32 header "math.h";
export native unchecked function __POSTINCREMENT__(x: uint16): uint16 header "math.h";
export native unchecked function __POSTINCREMENT__(x: uint8 ): uint8  header "math.h";
export native unchecked function __POSTINCREMENT__(x: float ): float  header "math.h";
export native unchecked function __POSTINCREMENT__(x: double): double header "math.h";

export native unchecked function __POSTDECREMENT__(x: xint32): xint32 header "math.h";
export native unchecked function __POSTDECREMENT__(x: xint16): xint16 header "math.h";
export native unchecked function __POSTDECREMENT__(x: xint8 ): xint8  header "math.h";
export native unchecked function __POSTDECREMENT__(x:  int32):  int32 header "math.h";
export native unchecked function __POSTDECREMENT__(x:  int16):  int16 header "math.h";
export native unchecked function __POSTDECREMENT__(x:  int8 ):  int8  header "math.h";
export native unchecked function __POSTDECREMENT__(x: uint32): uint32 header "math.h";
export native unchecked function __POSTDECREMENT__(x: uint16): uint16 header "math.h";
export native unchecked function __POSTDECREMENT__(x: uint8 ): uint8  header "math.h";
export native unchecked function __POSTDECREMENT__(x: float ): float  header "math.h";
export native unchecked function __POSTDECREMENT__(x: double): double header "math.h";

export generated type string
	generator "org.eclipse.mita.library.stdlib.StringGenerator"
	size-inferrer "org.eclipse.mita.library.stdlib.StringSizeInferrer"
	
	constructor con(size : static uint32);

/**
 * A modality is represents part of the runtime state of a resource (e.g. a sensor value). 
 * This state can be read at any time. Note that even two consecutive reads of the same
 * modality can yield different values, as the runtime state may have changed in the meantime.
 */
export generated type modality<T>
	generator "org.eclipse.mita.library.stdlib.VirtualTypeGenerator"
	size-inferrer "org.eclipse.mita.library.stdlib.VirtualTypeSizeInferrer"
	validator "org.eclipse.mita.library.stdlib.VirtualTypeValidator"
	constructor con();

/**
 * Reads the value of a modality.
 */
export generated fn <T> read(self : modality<T>) : T
	generator "org.eclipse.mita.library.stdlib.functions.ModalityReadGenerator";

/**
 * A signal instance is a bidirectional channel to the outside world, configured in the setup block
 * of a resource. Using the read() or write() function, one can read or write to that signal instance.
 */
export generated type siginst<T>
	generator "org.eclipse.mita.library.stdlib.VirtualTypeGenerator"
	size-inferrer "org.eclipse.mita.library.stdlib.VirtualTypeSizeInferrer"
	validator "org.eclipse.mita.library.stdlib.VirtualTypeValidator"
	constructor con();

/**
 * Reads a value from the signal instance. Note that even two consecutive reads on a modality might yield different values.
 */
export generated fn <T> read(self : siginst<T>) : T
	generator "org.eclipse.mita.library.stdlib.functions.SignalInstanceReadWriteGenerator";

/**
 * Writes a value to the signal instance. Depending on the type of signal this write might take considerable time or trigger an event
 * down the line.
 */
export generated fn <T> write(self : siginst<T>, value : T) : void
	generator "org.eclipse.mita.library.stdlib.functions.SignalInstanceReadWriteGenerator";

/*
 * Base of all exceptions.
 */
export exception Exception;

/*
 * Exception indicating that an index was out of range.
 */
export exception IndexOutOfBoundsException;

/*
 * Exception indicating that a range was invalid.
 */
export exception InvalidRangeException;

/*
 * Indicates that there was no element of a certain kind available.
 */
export exception NoSuchElementException;

/*
 * Indicates that some action took longer than expected.
 */
export exception TimeoutException;
