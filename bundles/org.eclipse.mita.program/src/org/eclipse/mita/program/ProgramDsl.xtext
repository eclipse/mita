/********************************************************************************
 * Copyright (c) 2017, 2018 Bosch Connected Devices and Solutions GmbH.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * Contributors:
 *    Bosch Connected Devices and Solutions GmbH - initial contribution
 *
 * SPDX-License-Identifier: EPL-2.0
 ********************************************************************************/

grammar org.eclipse.mita.program.ProgramDsl with org.eclipse.mita.base.TypeDsl

import "org.eclipse.mita.program" as program
import "org.eclipse.mita.base.types" as types
import "org.eclipse.mita.base.expressions" as expressions
import "org.eclipse.mita.platform" as platform
import "http://www.eclipse.org/emf/2002/Ecore" as ecore


Program returns program::Program:
	{program::Program}

	'package' name=QID ';'
	(imports+=ImportStatement)*
	
	(setup += SystemResourceSetup
	| globalVariables+= VariableDeclaration 
	| functionDefinitions += (FunctionDefinition | GeneratedFunctionDefinition | NativeFunctionDefinition)
	| eventHandlers+=EventHandlerDeclaration
	| types+=TypeDeclaration
	)*
;

ImportStatement returns types::ImportStatement:
	'import' importedNamespace=QID ';'
;

SystemResourceSetup returns program::SystemResourceSetup:
	'setup' ((name=ID) ':')? type=[platform::AbstractSystemResource|QID] '{'
		(configurationItemValues += ConfigurationItemValue)*
		(signalInstances += SignalInstance)*
	'}'
;

ConfigurationItemValue returns program::ConfigurationItemValue: 
	item=[platform::ConfigurationItem] '=' value=Expression ';'
;

SignalInstance returns program::SignalInstance: 
	(writeable ?= 'var') name=ID typeSpecifier=NullTypeSpecifier '=' initialization=ElementReferenceExpression ';'
;

GeneratedFunctionDefinition returns program::GeneratedFunctionDefinition: 
	(exported?='export')?
	'generated' ('fn' | 'function') ('<' typeParameters+=GenericFunctionTypeParameter (',' typeParameters+=GenericFunctionTypeParameter)* '>')? name=ID '(' (parameters+=FunctionParameterDeclaration (',' parameters+=FunctionParameterDeclaration)*)? ')' typeSpecifier=OptionalTypeSpecifier
	'generator' generator=STRING
	('validator' validator=STRING)?
	';'
;

NativeFunctionDefinition returns program::NativeFunctionDefinition:
	(exported?='export')?
	'native' (checked?='checked' | 'unchecked') ('fn' | 'function') ('<' typeParameters+=GenericFunctionTypeParameter (',' typeParameters+=GenericFunctionTypeParameter)* '>')? name=ID '(' (parameters+=FunctionParameterDeclaration (',' parameters+=FunctionParameterDeclaration)*)? ')' ':' typeSpecifier=TypeSpecifier
	'header' header=STRING ';'
;

FunctionDefinition returns program::FunctionDefinition:
	(exported?='export')?
	('fn' | 'function') ('<' typeParameters+=GenericFunctionTypeParameter (',' typeParameters+=GenericFunctionTypeParameter)* '>')? name=ID '(' (parameters+=FunctionParameterDeclaration (',' parameters+=FunctionParameterDeclaration)*)? ')' typeSpecifier=OptionalTypeSpecifier
	(body = ProgramBlock)?
;

OptionalTypeSpecifier returns types::TypeSpecifier:
	(':' TypeSpecifier) | ({types::NullTypeSpecifier})
;

GenericFunctionTypeParameter returns types::TypeParameter: 
	name=ID ('<:' bound=[types::Type])?
;

FunctionParameterDeclaration returns program::FunctionParameterDeclaration:
	name=ID ':' (static?='static')? typeSpecifier=TypeSpecifier (optional?='=' value=Expression)?
;

VariableDeclaration returns program::VariableDeclaration: 
	(writeable ?= 'var' | 'let') name=ID typeSpecifier=OptionalTypeSpecifier ('=' initialization=Expression)? ';'
;

EventHandlerDeclaration returns program::EventHandlerDeclaration: 
	'every' event=(TimeIntervalEvent | SystemEventSource)
	block=ProgramBlock
;

TimeIntervalEvent returns program::TimeIntervalEvent: 
	interval=IntLiteral unit=TimeUnit
;

enum TimeUnit returns program::TimeUnit: 
	Millisecond = 'millisecond' | Millisecond='milliseconds' |
	Second = 'second' | Second = 'seconds' |
	Minute = 'minute' | Minute = 'minutes' |
	Hour = 'hour' | Hour = 'hours' 
;

SystemEventSource returns program::SystemEventSource: 
	origin=[platform::AbstractSystemResource] '.' source=[types::Event]
;

ProgramBlock returns program::ProgramBlock:
	{program::ProgramBlock}
	'{' (content+=AbstractStatement)* '}'
;

AbstractStatement returns program::AbstractStatement:
	(
	  VariableDeclaration 
	| ExpressionStatement
	| DoWhileStatement
	| AbstractLoopStatement
	| IfStatement
	| WhileStatement
	| TryStatement
	| ThrowExceptionStatement
	| ReturnStatement
	| WhereIsStatement
	)
;

ExpressionStatement returns program::ExpressionStatement:
	expression=Expression ';'
;

@Override
Literal returns expressions::Literal:
	ArrayLiteral | BoolLiteral | HexLiteral | BinaryLiteral | IntLiteral | DoubleLiteral | FloatLiteral | StringLiteral | InterpolatedStringLiteral;

ArrayLiteral returns program::ArrayLiteral:
	{program::ArrayLiteral}
	'[' (values+=Expression (',' values += Expression)*)? ']'
;

@Override 
PrimaryExpression returns types::Expression:
	PrimitiveValueExpression
	| FeatureCall
	| NewInstanceExpression
	| DereferenceExpression
	| ReferenceExpression
;


DereferenceExpression returns program::DereferenceExpression hidden():
	'*' expression=PrimaryExpression
;

ReferenceExpression returns program::ReferenceExpression hidden(): 
	'&' variable=FeatureCall
;

NewInstanceExpression returns program::NewInstanceExpression:
	'new' type=UnqualifiedPresentTypeSpecifier '(' (arguments+=Argument (',' arguments+=Argument)*)? ')' 
;

UnqualifiedPresentTypeSpecifier returns types::PresentTypeSpecifier:
	type=[types::Type|ID] (WS? '<' (WS? typeArguments+=TypeSpecifier (WS? ',' WS? typeArguments+=TypeSpecifier)* WS? '>'))?
;


DoWhileStatement returns program::DoWhileStatement: 
	'do' body=ProgramBlock 'while' '(' condition=Expression ')'
;

AbstractLoopStatement returns program::AbstractLoopStatement:
	'for' '('(
		( {program::ForEachStatement} iterator=ForEachLoopIteratorVariableDeclaration =>'in' iterable=Expression )
		| ({program::ForStatement} (loopVariables += ForLoopVariableDeclaration (',' loopVariables += ForLoopVariableDeclaration)*)? ';'
			condition = Expression ';'
			(postLoopStatements += (Expression) (',' postLoopStatements += (Expression))*)? )
	)')' body=ProgramBlock
;

ForEachLoopIteratorVariableDeclaration returns program::ForEachLoopIteratorVariableDeclaration:
	'var' name=ID
;

ForLoopVariableDeclaration returns program::VariableDeclaration:
	writeable ?= 'var' name=ID typeSpecifier=OptionalTypeSpecifier '=' initialization=Expression;

IfStatement returns program::IfStatement:
	'if' '(' condition=Expression ')' 	
	then=ProgramBlock
	elseIf+=ElseIfStatement*
	('else' ^else=ProgramBlock)?
;
ElseIfStatement returns program::ConditionalStatement: 
	'else' 'if' '(' condition=Expression ')' 	
	then=ProgramBlock
;

WhileStatement returns program::WhileStatement: 
	'while' '(' condition=Expression ')' body=ProgramBlock
;

ReturnStatement returns program::ReturnStatement:
	{program::ReturnStatement} 
	'return' (value=Expression)? ';'
;

WhereIsStatement returns program::WhereIsStatement:
	'where' '(' matchElement=ElementReferenceExpression ')' '{'
		(isCases += IsCase)*
	'}'
;

IsCase returns program::IsCase:
	IsTypeMatchCase | IsAssignmentCase | IsDeconstructionCase | IsOtherCase
;

IsTypeMatchCase returns program::IsTypeMatchCase:
	'is' '(' productType=[types::SumAlternative|QID] ')'
	body=ProgramBlock
;

IsAssignmentCase returns program::IsAssignmentCase:
	'is' '(' assignmentVariable=IsAssignmentVariable ')' 
	body=ProgramBlock
; 
IsAssignmentVariable returns program::VariableDeclaration:
	name=ID ':' typeSpecifier=TypeSpecifier
;

IsDeconstructionCase returns  program::IsDeconstructionCase:
	'is' '(' productType=[types::SumAlternative|QID] '->' deconstructors+=IsDeconstructor (',' deconstructors+=IsDeconstructor)*
	')' 
	body=ProgramBlock
;
IsDeconstructor returns program::IsDeconstructor:
	name=ID ('=' productMember=[types::ProductMember|QID])?
;

IsOtherCase returns program::IsOtherCase:
	'isother' 
	body=ProgramBlock
;

ThrowExceptionStatement returns program::ThrowExceptionStatement: 
	'throw' exceptionType=[types::ExceptionTypeDeclaration] ('(' message=STRING ')')? ';'
;

TryStatement returns program::TryStatement: 
	'try' try=ProgramBlock
	(catchStatements+=CatchStatement)+
	('finally' ^finally=ProgramBlock)?
;
CatchStatement returns program::CatchStatement: 
	'catch' '(' exceptionType=[types::ExceptionTypeDeclaration] ')' body=ProgramBlock
;

