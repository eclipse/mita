@GenModel(operationReflection="false", modelDirectory="/org.eclipse.mita.program/emf-gen")
package org.eclipse.mita.program

/********************************************************************************
 * Copyright (c) 2017, 2018 Bosch Connected Devices and Solutions GmbH.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * Contributors:
 *    Bosch Connected Devices and Solutions GmbH - initial contribution
 *
 * SPDX-License-Identifier: EPL-2.0
 ********************************************************************************/
  
import org.eclipse.emf.ecore.EObject
import org.eclipse.mita.base.expressions.ElementReferenceExpression
import org.eclipse.mita.base.expressions.ArrayAccessExpression
import org.eclipse.mita.base.types.Expression
import org.eclipse.mita.base.expressions.AbstractStatement
import org.eclipse.mita.base.expressions.AssignmentOperator
import org.eclipse.mita.base.expressions.AssignmentExpression
import org.eclipse.mita.base.expressions.IntLiteral
import org.eclipse.mita.base.expressions.Literal
import org.eclipse.mita.base.types.Event
import org.eclipse.mita.base.util.BaseUtils
import org.eclipse.mita.base.types.Operation 
import org.eclipse.mita.base.types.Parameter
import org.eclipse.mita.base.types.Property
import org.eclipse.mita.platform.AbstractSystemResource
import org.eclipse.mita.platform.ConfigurationItem
import org.eclipse.mita.platform.Modality
import org.eclipse.mita.platform.Signal
import org.eclipse.mita.base.types.PackageAssociation
import org.eclipse.mita.base.types.ImportStatement
import org.eclipse.mita.base.types.Exportable
import org.eclipse.mita.base.types.GeneratedElement
import org.eclipse.mita.base.types.ExceptionTypeDeclaration
import org.eclipse.mita.base.types.PresentTypeSpecifier
import org.eclipse.mita.base.types.GeneratedType
import org.eclipse.mita.base.types.SumAlternative
import org.eclipse.xtext.nodemodel.util.NodeModelUtils
import org.eclipse.xtext.EcoreUtil2
import org.eclipse.mita.base.types.InterpolatedStringLiteral

class Program extends PackageAssociation {
	contains ImportStatement[] imports
	contains SystemResourceSetup[] setup
	contains VariableDeclaration[] globalVariables
	contains Operation[] functionDefinitions
	contains EventHandlerDeclaration[] eventHandlers
	op String toString() {
		return "PROGRAM " + name;
	}
}

class SystemResourceSetup {
	id String name
	refers AbstractSystemResource ^type
	contains ConfigurationItemValue[] configurationItemValues
	contains SignalInstance[] signalInstances
	
	op Expression getConfigurationItemValue(String name) {
		configurationItemValues.filter[x | x.item?.name == name ].head?.value;
	}
	op Expression getConfigurationItemValueOrDefault(String name) {
		getConfigurationItemValue(name)?:(^type?.configurationItems?.findFirst[it.name == name]?.defaultValue)
	}
	
	op String toString() {
		val typeName = BaseUtils.getText(this, ProgramPackage.eINSTANCE.systemResourceSetup_Type);
		return 'setup ' + name + ': ' + typeName + ' {...}';
	}
}

class ConfigurationItemValue {
	refers ConfigurationItem item
	contains Expression value
	op String toString() {
		val ref = eGet(ProgramPackage.eINSTANCE.configurationItemValue_Item, false)
		var refText = ref?.toString()
		refText = refText ?: BaseUtils.getText(this, ProgramPackage.eINSTANCE.configurationItemValue_Item)
		return refText + " = " + value.toString();
	}
}

/*
 * To get a parameter value, you need to use ModelUtils.getArgumentValue(vciv, 'paramName')
 */
class SignalInstance extends VariableDeclaration {
	
	op Signal getInstanceOf() {
		return if(initialization instanceof ElementReferenceExpression) {
			val ref = (initialization as ElementReferenceExpression).reference;
			if(ref instanceof Signal) {
				ref;
			}
		}
	} 
	
}

class EventHandlerDeclaration {
	contains EventSource event
	contains ProgramBlock block
	
	op String toString() {
		return "every " + event.toString()
	}
}

abstract class EventSource { }
class TimeIntervalEvent extends EventSource {
	contains IntLiteral interval
	TimeUnit unit
	op String toString() {
		return interval.toString + " " + unit.toString
	}
}
class SystemEventSource extends EventSource {
	refers AbstractSystemResource origin
	refers Event source
	
	op String toString() {
		val ref = eGet(ProgramPackage.eINSTANCE.systemEventSource_Source, false);
		var refText = ref?.toString();
		refText = refText ?: NodeModelUtils.findNodesForFeature(this, ProgramPackage.eINSTANCE.systemEventSource_Source).head?.text;

		return refText ?: "null";
	}
}

enum TimeUnit {
	Millisecond
	Second
	Minute
	Hour
}

abstract class ExportableOperation extends Operation, Exportable {
	op String toString() {
		return super.toString();
	}
}

class FunctionDefinition extends ExportableOperation {
	contains ProgramBlock body
	
	op String getId(){
		return null;
	}
	op String toString() {
		super.toString()
	}
}

class GeneratedFunctionDefinition extends ExportableOperation, GeneratedElement {
	op String getId(){
		return null;
	}
	op String toString() {
		return super.toString();
	}
}

class NativeFunctionDefinition extends ExportableOperation, GeneratedElement {
	String header
	boolean checked
	op String toString() {
		super.toString()
	}
}

class FunctionParameterDeclaration extends Parameter {
	boolean ^static
	contains Expression value
	
	op String toString() {
		return (if(static) 'static ' else '') + super.toString();
	}
}

class ProgramBlock {
	contains AbstractStatement[] content
	op String toString() {
		return "PROGRAM_BLOCK {...}"
	}
}

class VariableDeclaration extends Property, AbstractStatement {
	boolean writeable
	contains Expression initialization
	op boolean isConst() {
		return !writeable
	}
	
	op String toString() {
		return (if(this.writeable) 'var' else 'let') + ' ' 
			+ name 
			+ (if(typeSpecifier instanceof PresentTypeSpecifier) ': ' + typeSpecifier else '') 
			+ (if(initialization !== null) ' = ' + initialization else '');
	}
}

class ArrayLiteral extends Literal {
	contains Expression[] values
}

abstract class AbstractLoopStatement extends AbstractStatement {
	contains ProgramBlock body	
}
class DoWhileStatement extends AbstractLoopStatement {
	contains Expression condition
}
class ForStatement extends AbstractLoopStatement {
	contains VariableDeclaration[] loopVariables
	contains Expression condition
	contains AbstractStatement[] postLoopStatements
}
class ForEachStatement extends AbstractLoopStatement {
	contains VariableDeclaration iterator
	contains Expression iterable
}
class ForEachLoopIteratorVariableDeclaration extends VariableDeclaration {
	
}
class WhileStatement extends AbstractLoopStatement {
	contains Expression condition
}

class ConditionalStatement extends AbstractStatement {
	contains Expression condition
	contains ProgramBlock then
}
class IfStatement extends ConditionalStatement {
	contains ConditionalStatement[] elseIf
	contains ProgramBlock ^else
}

class ReturnParameterDeclaration extends VariableDeclaration {
	op String getName() {
		return "_result";
	}
	op String toString() {
		return name;
	}
	op boolean isWriteable() {
		return true;
	}
}
class ReturnStatement extends AbstractStatement {
	op String toString() {
		return 'return;';
	}
}
class ReturnParameterReference extends ElementReferenceExpression {
	op EObject getReference() {
		val funDef = EcoreUtil2.getContainerOfType(this, FunctionDefinition);
		val returnParameter = funDef?.eAllContents?.filter(ReturnParameterDeclaration)?.head;
		return returnParameter;
	}
	
	op String toString() {
		return reference.toString
	}
}
class ReturnValueExpression extends AssignmentExpression {
	op String toString() {
		return 'return ...;';
	}
	op AssignmentOperator getOperator() {
		return AssignmentOperator.ASSIGN;
	}
}

class WhereIsStatement extends AbstractStatement {
	contains Expression matchElement
	contains IsCase[] isCases
	op String toString() {
		return "where(" + matchElement + ") { ...[" + isCases.length + "]... }"
	}
}

abstract class IsCase extends AbstractStatement { 
	contains ProgramBlock body
}

class IsTypeMatchCase extends IsCase {
	refers SumAlternative productType
	op String toString() {
		return NodeModelUtils.findNodesForFeature(this, ProgramPackage.eINSTANCE.isTypeMatchCase_ProductType).head?.text;
	}
}

class IsAssignmentCase extends IsCase {
	contains VariableDeclaration assignmentVariable
	op String toString() {
		return "is(" + assignmentVariable.name + ": " + assignmentVariable.typeSpecifier + ") { ... }" 
	}
}
class IsDeconstructionCase extends IsCase {
	refers SumAlternative productType
	contains IsDeconstructor[] deconstructors
	op Boolean isAnonymous() {
		return deconstructors.map[it.productMember === null].contains(true);
	}
	op String toString() {
		val ref = eGet(ProgramPackage.eINSTANCE.isDeconstructionCase_ProductType, false)
		var refText = (ref as SumAlternative)?.name;
		refText = refText ?: NodeModelUtils.findNodesForFeature(this, ProgramPackage.eINSTANCE.isDeconstructionCase_ProductType).head?.text;
		return "is(" + refText + " -> " + deconstructors.join(", ") + ") { ... }" 
	}
}

class IsOtherCase extends IsCase { }
class IsDeconstructor extends VariableDeclaration { 
	refers Parameter productMember
	op String toString() {
		return super.toString + "(" + NodeModelUtils.findNodesForFeature(this, ProgramPackage.eINSTANCE.isDeconstructor_ProductMember).head?.text + ")";
	}
}

class ThrowExceptionStatement extends AbstractStatement {
	refers ExceptionTypeDeclaration exceptionType
	String message
}

class TryStatement extends AbstractStatement {
	contains ProgramBlock ^try
	contains CatchStatement[] catchStatements
	contains ProgramBlock ^finally
}
class CatchStatement extends AbstractStatement {
	refers ExceptionTypeDeclaration exceptionType
	contains ProgramBlock body
}

class NewInstanceExpression extends ElementReferenceExpression {
	contains PresentTypeSpecifier ^type
	
	op Operation getReference() {
		val refType = ^type.^type;
		if(refType instanceof GeneratedType) {
			return refType.constructor;
		}
	}
}

class DereferenceExpression extends Expression {
	contains Expression expression
	op EObject getInnerReference() {
		if(expression instanceof DereferenceExpression) {
			return (expression as DereferenceExpression).getInnerReference();
		}
		return expression;
	}
	
	op String toString() {
		return "*" + expression;
	}
}

class ReferenceExpression extends Expression {
	contains Expression variable
	op String toString() {
		return "&" + variable;
	}
} 


/**
 * Post-transformation classes
 */
class NoopStatement extends AbstractStatement {
	op String toString() {
		return "no-op();";
	}
}
 
class ModalityAccessPreparation extends AbstractStatement {
	refers AbstractSystemResource systemResource
	refers Modality[] modalities
	op String toString() {
		return "modalityAccessPreparation(" 
			+ (systemResource?.toString ?: "null") + ", " 
			+ modalities.map[it?.toString ?: "null"] + ");"
	}
}
class ModalityAccess extends Expression {
	refers ModalityAccessPreparation preparation
	refers Modality modality
	op String toString() {
		return "modalityAccess(" 
			+ (preparation?.toString ?: "null") + ", " 
			+ (modality?.toString ?: "null") + ")"
	}
}
class SignalInstanceReadAccess extends VariableDeclaration {
	refers SignalInstance vci
}
class SignalInstanceWriteAccess extends Expression {
	refers SignalInstance vci
	contains Expression value
}
class ExceptionBaseVariableDeclaration extends VariableDeclaration {
	boolean needsReturnFromTryCatch
}
class SourceCodeComment extends AbstractStatement {
	String content
}
class LoopBreakerStatement extends AbstractStatement {
	contains Expression condition
}
class ArrayRuntimeCheckStatement extends AbstractStatement {
	refers ArrayAccessExpression access
}

