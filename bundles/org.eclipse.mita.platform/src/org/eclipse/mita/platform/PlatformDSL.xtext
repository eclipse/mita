/********************************************************************************
 * Copyright (c) 2017, 2018 Bosch Connected Devices and Solutions GmbH.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * Contributors:
 *    Bosch Connected Devices and Solutions GmbH - initial contribution
 *
 * SPDX-License-Identifier: EPL-2.0
 ********************************************************************************/

grammar org.eclipse.mita.platform.PlatformDSL with org.eclipse.mita.base.TypeDsl

import "org.eclipse.mita.base.types"
import "org.eclipse.mita.platform" as platform

SystemSpecification returns platform::SystemSpecification:
	{platform::SystemSpecification}
	'package' name=QID ';'
	
	(
		resources+=(AbstractSystemResource | PlatformSpecification | SystemResourceAlias)
		| types += TypeDeclaration
	)+
;

/* PLATFORM SPEC *****************************************************************/

PlatformSpecification returns platform::Platform: 
	'platform' name=ID '{' 
		typeKind=TypeKind
		'module' module=STRING
		('generator' generator=STRING)?
		('validator' validator=STRING)?
	(
		('has' resources+=[platform::AbstractSystemResource])
		| (events += SystemResourceEvent)
		| (configurationItems += ConfigurationItem)
		| (modalities += Modality)
	)* '}'
;

SystemResourceAlias returns platform::SystemResourceAlias: 
	'alias' name=ID typeKind=TypeKind 'for' delegate=[platform::AbstractSystemResource]
;

enum Instantiability returns platform::Instantiability: 
	Singleton = 'singleton'
	| NamedSingleton = 'named-singleton'
	| Many = 'many'
;


AbstractSystemResource returns platform::AbstractSystemResource: 
	( 'sensor' {platform::Sensor}
	| 'connectivity' {platform::Connectivity}
	| 'io' {platform::InputOutput}
	| 'bus' {platform::Bus}	
	)
	typeKind=TypeKind
	(instantiable=Instantiability)?
	name=ID  '{'
		'generator' generator=STRING
		('validator' validator=STRING)?
		('sizeInferrer' sizeInferrer=STRING)?
		
		( configurationItems += ConfigurationItem
		| signals += Signal
		| events += SystemResourceEvent
		| modalities += Modality
		)*
	'}'
;

ConfigurationItem returns platform::ConfigurationItem: 
	(required ?= 'required')? 'configuration-item' name=ID ':' typeSpecifier=TypeSpecifier ('=' defaultValue=Expression)?
;

Signal returns platform::Signal:
	'signal' name=ID '(' (parameters+=SignalParameter (',' parameters+=SignalParameter)*)? ')' ':' typeSpecifier=TypeSpecifier
;

SignalParameter returns platform::SignalParameter:
	name=ID ':' typeSpecifier=TypeSpecifier (optional?='=' defaultValue=Expression)?
;

Modality returns platform::Modality: 
	'modality' name=ID ':' typeSpecifier=TypeSpecifier
;
